package com.bonifacio.urls_ripper.services;

import com.bonifacio.urls_ripper.dtos.UrlDto;
import com.bonifacio.urls_ripper.dtos.UrlUserDto;
import com.bonifacio.urls_ripper.dtos.UrlsDetails;
import com.bonifacio.urls_ripper.encode.UrlEncode;
import com.bonifacio.urls_ripper.entities.Url;
import com.bonifacio.urls_ripper.entities.UserUrl;
import com.bonifacio.urls_ripper.mappers.UrlMapper;
import com.bonifacio.urls_ripper.repositories.UrlRepository;
import com.bonifacio.urls_ripper.repositories.UrlUserRepository;
import com.bonifacio.urls_ripper.repositories.UserRepository;
import lombok.AllArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;

import static com.google.common.hash.Hashing.murmur3_32;

@AllArgsConstructor
@Component
public class UrlsServiceImplement implements UrlService {
    @Autowired
    private final UrlRepository _urlRepository;
    @Autowired
    private final JwtService _jwtService;
    @Autowired
    private final UrlUserRepository _urlUserRepository;
    @Autowired
    private final UserRepository _userRepository;
    @Autowired
    private  final UrlEncode _urlEncode;
    @Autowired
    private final UrlMapper _urlMapper;
    @Autowired
    private final DateCal _dateCal;
    /**
     * The `generateSlug` function takes a `UrlDto` object, encodes the URL, creates
     * a new `Url` object
     * with the encoded URL as the slug, sets the creation and expiration dates, and
     * returns the `Url`
     * object.
     * 
     * @param urlDto The `urlDto` parameter is an object of type `UrlDto` which
     *               contains the following
     *               properties:
     * @return The method is returning an object of type Url.
     */
    @Override
    public Url generateSlug(UrlDto urlDto) {
        if (StringUtils.isEmpty(urlDto.url())) {
            return null;
        }
        String encodeUrl = _urlEncode.urlEncode(urlDto.url());
        Url urlPersistence = _urlMapper.urlDtoToUrl(urlDto);
        urlPersistence
                .setExpirationData(_dateCal.getExpirationData(urlDto.expirationDate(), urlPersistence.getCreationData()));
        urlPersistence.setSlug(encodeUrl);
        if (StringUtils.isEmpty(encodeUrl))
            return null;

        return urlPersistence;
    }

    /**
     * @param urlUserDto
     * @param token
     * @return
     */
    /**
     * The function generates a user slug based on input data and a token, creating
     * a UserUrl object
     * with the encoded URL and other details.
     * 
     * @param urlUserDto The `urlUserDto` parameter is an object that contains
     *                   information about a
     *                   user's URL, such as the URL itself, the name of the URL, a
     *                   description, and an expiration date.
     *                   It is used to generate a user slug for the given URL.
     * @param token      A token is a piece of data that is used to authenticate a
     *                   user and grant access to
     *                   a system or application. It is typically generated by the
     *                   system upon successful login and is
     *                   used to identify the user in subsequent requests. In the
     *                   context of the code snippet you
     *                   provided, the token is likely being used
     * @return The method `generateUserSlug` returns a `UserUrl` object, which
     *         contains information
     *         such as the link, name, slug, user, description, creation date, and
     *         expiration date.
     */
    @Override
    public UserUrl generateUserSlug(UrlUserDto urlUserDto, String token) {
        if (StringUtils.isEmpty(token) || StringUtils.isEmpty(urlUserDto.url())) {
            return null;
        }
        var username = _jwtService.getUsernameFromToken(token);
        var user = _userRepository.findByUsername(username);
        if (user.isEmpty()) {
            return null;
        }
        var slug = _urlEncode.urlEncode(urlUserDto.url());
        if (StringUtils.isEmpty(slug))
            return null;
        var url = _urlMapper.urlUserDtoToUserUrl(urlUserDto);
        url.setSlug(slug);
        url.setUser(user.get());
        url.setExpirationData(_dateCal.getExpirationData(urlUserDto.expirationDate(), url.getCreationData()));
        return url;
    }


    /**
     * Persists a URL object in the database.
     * Saves the provided URL object using the URL repository.
     * @param url The URL object to be persisted.
     * @return The persisted URL object.
     */
    @Override
    public Url persitenstUrl(Url url) {

        return _urlRepository.save(url);
    }

    /**
     * Persists a UserUrl object in the database.
     * Saves the provided UserUrl object using the UserUrl repository.
     * @param userUrl The UserUrl object to be persisted.
     * @return The persisted UserUrl object.
     */
    @Override
    public UserUrl persitestUserUrl(UserUrl userUrl) {

        return _urlUserRepository.save(userUrl);
    }

    /**
     * The function `getEncodeUrl` returns a Url object based on the provided slug.
     * 
     * @param url The `url` parameter in the `getEncodeUrl` method is a String
     *            representing the URL that
     *            you want to encode or retrieve from the `_urlRepository` based on
     *            a given slug.
     * @return The method `getEncodeUrl` is returning a `Url` object, which is
     *         retrieved from the
     *         `_urlRepository` by searching for a slug that matches the input
     *         `url`.
     */
    @Override
    public Url getEncodeUrl(String url) {
        return _urlRepository.findBySlug(url);
    }

    /**
     * Retrieves URL details by its slug from the database.
     * Searches for a URL in the UserUrl repository by its slug.
     * Converts the found UserUrl object to UrlsDetails using the UrlMapper.
     * @param id The slug of the URL to be retrieved.
     * @return The URL details corresponding to the provided slug.
     */
    @Override
    public UrlsDetails getUserUrlById(String id) {
        // Retrieve UserUrl object from the repository by its slug
        var url = _urlUserRepository.findBySlug(id);
        // Convert the found UserUrl object to UrlsDetails using the UrlMapper
        return _urlMapper.userUrlToUserDetails(url);
    }


    /**
     * Deletes a URL by its ID from the appropriate repository.
     * Searches for a URL by its ID in both the UserUrl repository and the Url repository.
     * If the URL is found in the UserUrl repository, it is deleted from there.
     * Otherwise, it is deleted from the Url repository.
     * @param url The URL object to be deleted.
     */
    @Override
    public void deleteSlug(Url url) {
        // Search for the URL by its ID in the UserUrl repository
        var userUrlOptional = _urlUserRepository.findById(url.getId());
        if (userUrlOptional.isPresent()) { // Check if the URL exists in the UserUrl repository
            _urlUserRepository.delete(userUrlOptional.get()); // Delete the URL from the UserUrl repository
        } else { // If the URL is not found in the UserUrl repository
            var urlOptional = _urlRepository.findById(url.getId())
                    .orElseThrow(); // Retrieve the URL from the Url repository
            _urlRepository.delete(urlOptional); // Delete the URL from the Url repository
        }
    }


    /**
     * Updates the details of a user URL.
     * Retrieves the user URL by its slug from the UserUrl repository.
     * If the user URL is found, updates its details with the provided data.
     * Saves the updated user URL to the repository and returns the updated details.
     * If the user URL is not found, returns null.
     * @param slug The slug of the user URL to be updated.
     * @param userDto The data to update the user URL with.
     * @return The updated user URL details if found, otherwise null.
     */
    @Override
    public UrlsDetails updateUserUrl(String slug, UrlUserDto userDto) {
        // Retrieve the user URL by its slug from the UserUrl repository
        var oldUrlOptional = _urlUserRepository.findBySlug(slug);

        // Check if the user URL exists
        if (oldUrlOptional.isEmpty()) {
            return null; // Return null if the user URL is not found
        }

        // Get the user URL object
        UserUrl oldUrl = oldUrlOptional.get();

        // Update the user URL details with the provided data
        oldUrl.setName(userDto.name());
        oldUrl.setDescription(userDto.description());
        oldUrl.setExpirationData(_dateCal.getExpirationData(userDto.expirationDate(), oldUrl.getExpirationData()));

        // Save the updated user URL to the repository
        _urlUserRepository.save(oldUrl);

        // Convert the updated user URL object to UrlsDetails using the UrlMapper and return
        return _urlMapper.userUrlToUserDetails(oldUrl);
    }

}
