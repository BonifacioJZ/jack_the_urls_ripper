package com.bonifacio.urls_ripper.services;

import com.bonifacio.urls_ripper.dtos.UrlDto;
import com.bonifacio.urls_ripper.dtos.UrlUserDto;
import com.bonifacio.urls_ripper.entities.Url;
import com.bonifacio.urls_ripper.entities.UserUrl;
import com.bonifacio.urls_ripper.repositories.UrlRepository;
import com.bonifacio.urls_ripper.repositories.UrlUserRepository;
import com.bonifacio.urls_ripper.repositories.UserRepository;
import lombok.AllArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Component;

import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;

import static com.google.common.hash.Hashing.murmur3_32;

@AllArgsConstructor
@Component
public class UrlsServiceImplement implements UrlService {
    private final UrlRepository _urlRepository;
    private final JwtService _jwtService;
    private final UrlUserRepository _urlUserRepository;
    private final UserRepository _userRepository;

    /**
     * The `generateSlug` function takes a `UrlDto` object, encodes the URL, creates
     * a new `Url` object
     * with the encoded URL as the slug, sets the creation and expiration dates, and
     * returns the `Url`
     * object.
     * 
     * @param urlDto The `urlDto` parameter is an object of type `UrlDto` which
     *               contains the following
     *               properties:
     * @return The method is returning an object of type Url.
     */
    @Override
    public Url generateSlug(UrlDto urlDto) {
        if (StringUtils.isEmpty(urlDto.url())) {
            return null;
        }
        String encodeUrl = encodeUrl(urlDto.url());
        Url urlPersistence = Url.builder()
                .link(urlDto.url())
                .slug(encodeUrl)
                .creationData(LocalDateTime.now())
                .build();
        urlPersistence
                .setExpirationData(getExpirationData(urlDto.expirationDate(), urlPersistence.getCreationData()));

        if (StringUtils.isEmpty(encodeUrl))
            return null;

        return urlPersistence;
    }

    /**
     * @param urlUserDto
     * @param token
     * @return
     */
    /**
     * The function generates a user slug based on input data and a token, creating
     * a UserUrl object
     * with the encoded URL and other details.
     * 
     * @param urlUserDto The `urlUserDto` parameter is an object that contains
     *                   information about a
     *                   user's URL, such as the URL itself, the name of the URL, a
     *                   description, and an expiration date.
     *                   It is used to generate a user slug for the given URL.
     * @param token      A token is a piece of data that is used to authenticate a
     *                   user and grant access to
     *                   a system or application. It is typically generated by the
     *                   system upon successful login and is
     *                   used to identify the user in subsequent requests. In the
     *                   context of the code snippet you
     *                   provided, the token is likely being used
     * @return The method `generateUserSlug` returns a `UserUrl` object, which
     *         contains information
     *         such as the link, name, slug, user, description, creation date, and
     *         expiration date.
     */
    @Override
    public UserUrl generateUserSlug(UrlUserDto urlUserDto, String token) {
        if (StringUtils.isEmpty(token) || StringUtils.isEmpty(urlUserDto.url())) {
            return null;
        }
        var username = _jwtService.getUsernameFromToken(token);
        var user = _userRepository.findByUsername(username);
        if (user.isEmpty()) {
            return null;
        }
        var slug = encodeUrl(urlUserDto.url());
        if (StringUtils.isEmpty(slug))
            return null;
        var url = UserUrl
                .builder()
                .link(urlUserDto.url())
                .name(urlUserDto.name())
                .slug(slug)
                .user(user.get())
                .description(urlUserDto.description())
                .creationData(LocalDateTime.now())
                .build();
        url.setExpirationData(getExpirationData(urlUserDto.expirationDate(), url.getCreationData()));
        return url;
    }

    /**
     * The function returns the expiration date as a LocalDateTime object, either by
     * parsing the
     * provided expiration date string or by adding one hour to the creation date if
     * the expiration
     * date is blank.
     * 
     * @param expirationDate A string representing the expiration date in the format
     *                       "yyyy-MM-dd
     *                       HH:mm:ss".
     * @param creationData   The creationData parameter is a LocalDateTime object
     *                       representing the date
     *                       and time of creation.
     * @return The method is returning a LocalDateTime object.
     */
    private LocalDateTime getExpirationData(String expirationDate, LocalDateTime creationData) {
        if (StringUtils.isBlank(expirationDate)) {
            return creationData.plusHours(1);
        }
        return LocalDateTime.parse(expirationDate);
    }

    /**
     * The function takes a URL and encodes it using the Murmur3_32 hashing
     * algorithm along with the
     * current timestamp.
     * 
     * @param url The `url` parameter is a string representing the URL that you want
     *            to encode.
     * @return The method is returning the encoded URL as a string.
     */
    private String encodeUrl(String url) {
        String encodeUrl = "";
        LocalDateTime time = LocalDateTime.now();
        encodeUrl = murmur3_32()
                .hashString(url.concat(time.toString()), StandardCharsets.UTF_8)
                .toString();
        return encodeUrl;
    }

    @Override
    public Url persitenstUrl(Url url) {

        return _urlRepository.save(url);
    }

    /**
     * @param userUrl
     * @return
     */
    @Override
    public UserUrl persitestUserUrl(UserUrl userUrl) {
        return _urlUserRepository.save(userUrl);
    }

    /**
     * The function `getEncodeUrl` returns a Url object based on the provided slug.
     * 
     * @param url The `url` parameter in the `getEncodeUrl` method is a String
     *            representing the URL that
     *            you want to encode or retrieve from the `_urlRepository` based on
     *            a given slug.
     * @return The method `getEncodeUrl` is returning a `Url` object, which is
     *         retrieved from the
     *         `_urlRepository` by searching for a slug that matches the input
     *         `url`.
     */
    @Override
    public Url getEncodeUrl(String url) {
        return _urlRepository.findBySlug(url);
    }

    @Override
    public void deleteSlug(Url url) {
        _urlRepository.delete(url);
    }
}
